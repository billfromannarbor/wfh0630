/*
 * This source file was generated by the Gradle 'init' task
 */
package org.rentalpos;

import org.rentalpos.entities.Charge;
import org.rentalpos.entities.GroupedDays;
import org.rentalpos.entities.Tool;
import org.rentalpos.services.*;
import org.junit.Test;

import java.math.BigDecimal;
import java.time.*;
import java.util.HashMap;
import java.util.Map;

import static org.junit.Assert.*;

public class ServiceTests {
    @Test
    public void inventoryServiceReturnsTool(){
        String toolCode = "CHNS";
        String toolType = "Chainsaw";
        String brand = "Stihl";
        Map<String, Tool> toolMap = Map.of(toolCode, new Tool(toolCode,toolType,brand));
    	iInventoryService inventoryService = new InventoryService(toolMap);
    	Tool tool = inventoryService.findTool(toolCode);
    	
    	assertNotNull(tool);	
    	assertEquals(toolCode,tool.toolCode());
    	assertEquals(toolType,tool.toolType());
    	assertEquals(brand,tool.brand());
    }

    @Test
    public void inventoryServiceReturnsTools(){
        String toolCode1 = "CHNS";
        String toolType1 = "Chainsaw";
        String brand1 = "Stihl";
        String toolCode2 = "LADW";
        String toolType2 = "Ladder";
        String brand2 = "Werner";
        Map<String,Tool> toolMap = Map.of(toolCode1, new Tool(toolCode1,toolType1,brand1),
                toolCode2, new Tool(toolCode2,toolType2,brand2));
    	iInventoryService inventoryService = new InventoryService(toolMap);
    	
    	Tool tool1 = inventoryService.findTool(toolCode1);	
    	assertNotNull(tool1);	
    	assertEquals(toolCode1,tool1.toolCode());
    	assertEquals(toolType1,tool1.toolType());
    	assertEquals(brand1,tool1.brand());
    	
    	Tool tool2 = inventoryService.findTool(toolCode2);	
    	assertNotNull(tool2);	
    	assertEquals(toolCode2,tool2.toolCode());
    	assertEquals(toolType2,tool2.toolType());
    	assertEquals(brand2,tool2.brand());
    }

    @Test
    public void inventoryServiceDoesNotReturnTool() {
        iInventoryService inventoryService = new InventoryService(new HashMap<>());
        Tool tool = inventoryService.findTool("MISSING");
        assertNull(tool);
        inventoryService = new InventoryService(Map.of("CHNS",
                new Tool("CHNS","Chainsaw","Stihl")));
        tool = inventoryService.findTool("MISSING");
        assertNull(tool);
    }

    @Test
    public void chargeServiceReturnsCharge() {
        String toolType = "Ladder";
        BigDecimal chargeAmount = BigDecimal.valueOf(1.99);
        boolean weekdayCharge = true;
        boolean weekendCharge = true;
        boolean holidayCharge = false;
        Map<String, Charge> chargeMap = Map.of(toolType,
                new Charge(chargeAmount, weekdayCharge, weekendCharge, holidayCharge));
    	iChargeService chargeService = new ChargeService(chargeMap);
    	
        Charge charge = chargeService.findCharge(toolType);
        
        assertNotNull(charge);
        assertEquals(chargeAmount, charge.amount());
        assertEquals(weekdayCharge, charge.weekday());
        assertEquals(weekendCharge, charge.weekend());
        assertEquals(holidayCharge, charge.holiday());
    }

    @Test
    public void chargeServiceReturnsCharges() {
        String toolType1 = "Ladder";
        BigDecimal chargeAmount1 = BigDecimal.valueOf(1.99);
        boolean weekdayCharge1 = true;
        boolean weekendCharge1 = true;
        boolean holidayCharge1 = false;
        String toolType2 = "Chainsaw";
        BigDecimal chargeAmount2 = BigDecimal.valueOf(1.49);
        boolean weekdayCharge2 = true;
        boolean weekendCharge2 = false;
        boolean holidayCharge2 = true;
        Map<String, Charge> chargeMap = Map.of(
                toolType1, new Charge(chargeAmount1, weekdayCharge1, weekendCharge1, holidayCharge1),
                toolType2, new Charge(chargeAmount2, weekdayCharge2, weekendCharge2, holidayCharge2)
        );

        iChargeService chargeService = new ChargeService(chargeMap);

        Charge charge1 = chargeService.findCharge(toolType1);
        assertNotNull(charge1);
        assertEquals(chargeAmount1, charge1.amount());
        assertEquals(weekdayCharge1, charge1.weekday());
        assertEquals(weekendCharge1, charge1.weekend());
        assertEquals(holidayCharge1, charge1.holiday());

        Charge charge2 = chargeService.findCharge(toolType2);
        assertEquals(chargeAmount2, charge2.amount());
        assertEquals(weekdayCharge2, charge2.weekday());
        assertEquals(weekendCharge2, charge2.weekend());
        assertEquals(holidayCharge2, charge2.holiday());
    }

    @Test
    public void rentalDaysReturnsNumberOfWeekdaysWeekendsAndHolidays() {
        //Holiday List here
        LocalDate checkoutDate = LocalDate.of(2024,6, 28);
        int rentalDayCount = 6;

        GroupedDays dayCounter = new DayGrouper(checkoutDate, rentalDayCount).getGroupedDays();
        System.out.println(dayCounter);

        assertEquals(3, dayCounter.weekdays());
        assertEquals(2, dayCounter.weekendDays());
        assertEquals(1, dayCounter.holidays());
    }








}
