/*
 * This source file was generated by the Gradle 'init' task
 */
package org.rentalpos;

import org.rentalpos.entities.Price;
import org.rentalpos.entities.DayCount;
import org.rentalpos.entities.Tool;
import org.rentalpos.services.*;
import org.junit.Test;

import java.math.BigDecimal;
import java.time.*;
import java.util.HashMap;
import java.util.Map;

import static org.junit.Assert.*;

public class ServiceTests {
    @Test
    public void inventoryServiceReturnsTool(){
        String toolCode = "CHNS";
        String toolType = "Chainsaw";
        String brand = "Stihl";
        Map<String, Tool> toolMap = Map.of(toolCode, new Tool(toolCode,toolType,brand));
    	iInventory inventoryService = new TestInventory(toolMap);
    	Tool tool = inventoryService.getTool(toolCode);
    	
    	assertNotNull(tool);	
    	assertEquals(toolCode,tool.toolCode());
    	assertEquals(toolType,tool.toolType());
    	assertEquals(brand,tool.brand());
    }

    @Test
    public void inventoryServiceReturnsTools(){
        String toolCode1 = "CHNS";
        String toolType1 = "Chainsaw";
        String brand1 = "Stihl";
        String toolCode2 = "LADW";
        String toolType2 = "Ladder";
        String brand2 = "Werner";
        Map<String,Tool> toolMap = Map.of(toolCode1, new Tool(toolCode1,toolType1,brand1),
                toolCode2, new Tool(toolCode2,toolType2,brand2));
    	iInventory inventoryService = new TestInventory(toolMap);
    	
    	Tool tool1 = inventoryService.getTool(toolCode1);
    	assertNotNull(tool1);	
    	assertEquals(toolCode1,tool1.toolCode());
    	assertEquals(toolType1,tool1.toolType());
    	assertEquals(brand1,tool1.brand());
    	
    	Tool tool2 = inventoryService.getTool(toolCode2);
    	assertNotNull(tool2);	
    	assertEquals(toolCode2,tool2.toolCode());
    	assertEquals(toolType2,tool2.toolType());
    	assertEquals(brand2,tool2.brand());
    }

    @Test
    public void inventoryServiceDoesNotReturnTool() {
        iInventory inventoryService = new TestInventory(new HashMap<>());
        Tool tool = inventoryService.getTool("MISSING");
        assertNull(tool);
        inventoryService = new TestInventory(Map.of("CHNS",
                new Tool("CHNS","Chainsaw","Stihl")));
        tool = inventoryService.getTool("MISSING");
        assertNull(tool);
    }

    @Test
    public void chargeServiceReturnsCharge() {
        String toolType = "Ladder";
        BigDecimal chargeAmount = BigDecimal.valueOf(1.99);
        boolean weekdayCharge = true;
        boolean weekendCharge = true;
        boolean holidayCharge = false;
        Map<String, Price> chargeMap = Map.of(toolType,
                new Price(toolType, chargeAmount, weekdayCharge, weekendCharge, holidayCharge));
    	iPricing pricing = new TestPricing(chargeMap);
    	
        Price price = pricing.findCharge(toolType);
        
        assertNotNull(price);
        assertEquals(chargeAmount, price.amount());
        assertEquals(weekdayCharge, price.weekday());
        assertEquals(weekendCharge, price.weekend());
        assertEquals(holidayCharge, price.holiday());
    }

    @Test
    public void chargeServiceReturnsCharges() {
        String toolType1 = "Ladder";
        BigDecimal chargeAmount1 = BigDecimal.valueOf(1.99);
        boolean weekdayCharge1 = true;
        boolean weekendCharge1 = true;
        boolean holidayCharge1 = false;
        String toolType2 = "Chainsaw";
        BigDecimal chargeAmount2 = BigDecimal.valueOf(1.49);
        boolean weekdayCharge2 = true;
        boolean weekendCharge2 = false;
        boolean holidayCharge2 = true;
        Map<String, Price> chargeMap = Map.of(
                toolType1, new Price(toolType1, chargeAmount1, weekdayCharge1, weekendCharge1, holidayCharge1),
                toolType2, new Price(toolType2, chargeAmount2, weekdayCharge2, weekendCharge2, holidayCharge2)
        );

        iPricing pricing = new TestPricing(chargeMap);

        Price price1 = pricing.findCharge(toolType1);
        assertNotNull(price1);
        assertEquals(chargeAmount1, price1.amount());
        assertEquals(weekdayCharge1, price1.weekday());
        assertEquals(weekendCharge1, price1.weekend());
        assertEquals(holidayCharge1, price1.holiday());

        Price price2 = pricing.findCharge(toolType2);
        assertEquals(chargeAmount2, price2.amount());
        assertEquals(weekdayCharge2, price2.weekday());
        assertEquals(weekendCharge2, price2.weekend());
        assertEquals(holidayCharge2, price2.holiday());
    }

    @Test
    public void rentalDaysReturnsNumberOfWeekdaysWeekendsAndHolidays() {
        //Holiday List here
        LocalDate checkoutDate = LocalDate.of(2024,6, 28);
        int rentalDayCount = 6;

        DayCount dayCounter = new DayCounter(checkoutDate, rentalDayCount).getDayCount();

        assertEquals(3, dayCounter.weekdays());
        assertEquals(2, dayCounter.weekendDays());
        assertEquals(1, dayCounter.holidays());
    }

    //July 5th and a monday should be a holiday
    @Test
    public void rentalSundayJuly4th() {
        //Holiday List here
        LocalDate checkoutDate = LocalDate.of(2027,7, 4);
        int rentalDayCount = 1;

        DayCount dayCounter = new DayCounter(checkoutDate, rentalDayCount).getDayCount();
        //assertEquals(0, dayCounter.);
        assertEquals(0, dayCounter.weekdays());
        assertEquals(0, dayCounter.weekendDays());
        assertEquals(1, dayCounter.holidays());
    }

    //July 4th and during the week
    @Test
    public void rentalWednesdayJuly3rd() {
        //Holiday List here
        LocalDate checkoutDate = LocalDate.of(2024,7, 3);
        int rentalDayCount = 1;

        DayCount dayCounter = new DayCounter(checkoutDate, rentalDayCount).getDayCount();

        assertEquals(0, dayCounter.weekdays());
        assertEquals(0, dayCounter.weekendDays());
        assertEquals(1, dayCounter.holidays());
    }

    //Rental on a weekday
    @Test
    public void rentalOnAWeekday() {
        LocalDate checkoutDate = LocalDate.of(2024,7, 10);
        int rentalDayCount = 1;

        DayCount dayCounter = new DayCounter(checkoutDate, rentalDayCount).getDayCount();

        assertEquals(1, dayCounter.weekdays());
        assertEquals(0, dayCounter.weekendDays());
        assertEquals(0, dayCounter.holidays());
    }

    //July 4th as a Saturday
    //It's a weekend but not a Holiday
    @Test
    public void rentalFridayJulyThird() {
        //Holiday List here
        LocalDate checkoutDate = LocalDate.of(2026,7, 3);
        int rentalDayCount = 1;

        DayCount dayCounter = new DayCounter(checkoutDate, rentalDayCount).getDayCount();
        //assertEquals(0, dayCounter.);
        assertEquals(0, dayCounter.weekdays());
        assertEquals(1, dayCounter.weekendDays());
        assertEquals(0, dayCounter.holidays());
    }

    @Test
    public void rentalSaturdayJuly3rd() {
        //Holiday List here
        LocalDate checkoutDate = LocalDate.of(2027,7, 3);
        int rentalDayCount = 1;

        DayCount dayCounter = new DayCounter(checkoutDate, rentalDayCount).getDayCount();
        //assertEquals(0, dayCounter.);
        assertEquals(0, dayCounter.weekdays());
        assertEquals(1, dayCounter.weekendDays());
        assertEquals(0, dayCounter.holidays());
    }


}
